#pragma once 
#include <Serialization.h>
#include "GameObject2D.h"
#include "Transform.hpp"
#include "Animation.h"
#include "Collision.h"
#include "Timer.hpp"
#include "RigidBody.h"

namespace HG {
namespace Serialization {

HG_MARSHAL_FULLSPEC( HGEngine::V1SDL::Transform ) {
	HG_MARSHAL_OBJECT_START;
	HG_MARSHAL_OBJECT_SETPROP( t.f64Angle );
	HG_MARSHAL_OBJECT_SETPROP( t.tLocalPos );
	HG_MARSHAL_OBJECT_SETPROP( t.tLocalRect );
	HG_MARSHAL_OBJECT_SETPROP( t.tPosition );
	HG_MARSHAL_OBJECT_SETPROP( t.tRect );
	HG_MARSHAL_OBJECT_SETPROP( t.tRotateCenter );
	HG_MARSHAL_OBJECT_END;
}

HG_UNMARSHAL_FULLSPEC( HGEngine::V1SDL::Transform ) {
	HG_UNMARSHAL_OBJECT_START;
	HG_UNMARSHAL_GETOBJ( t.f64Angle );
	HG_UNMARSHAL_GETOBJ( t.tLocalPos );
	HG_UNMARSHAL_GETOBJ( t.tLocalRect );
	HG_UNMARSHAL_GETOBJ( t.tPosition );
	HG_UNMARSHAL_GETOBJ( t.tRect );
	HG_UNMARSHAL_GETOBJ( t.tRotateCenter );
	HG_UNMARSHAL_OBJECT_END;
}

HG_MARSHAL_FULLSPEC( HGEngine::V1SDL::Animator2D::Frame ) {
	HG_MARSHAL_OBJECT_START;
	HG_MARSHAL_OBJECT_SETPROP( t.tPos );
	HG_MARSHAL_OBJECT_SETPROP( t.tRect );
	HG_MARSHAL_OBJECT_END;
}

HG_UNMARSHAL_FULLSPEC( HGEngine::V1SDL::Animator2D::Frame ) {
	HG_UNMARSHAL_OBJECT_START;
	HG_UNMARSHAL_GETOBJ( t.tPos );
	HG_UNMARSHAL_GETOBJ( t.tRect );
	HG_UNMARSHAL_OBJECT_END;
}


HG_MARSHAL_FULLSPEC( HGEngine::V1SDL::Animator2D ) {
	HG_MARSHAL_OBJECT_START;
	HG_MARSHAL_OBJECT_SETPROP( t.Col );
	HG_MARSHAL_OBJECT_SETPROP( t.Row );
	HG_MARSHAL_OBJECT_SETPROP( t.f32Interval );
	HG_MARSHAL_OBJECT_SETPROP( t.IsIdle );
	HG_MARSHAL_OBJECT_SETPROP( t.m_unIdleFrameIndex );
	HG_MARSHAL_OBJECT_SETPROP( t.m_vecFrames );
	HG_MARSHAL_OBJECT_END;
}

HG_UNMARSHAL_FULLSPEC( HGEngine::V1SDL::Animator2D ) {
	HG_UNMARSHAL_OBJECT_START;
	HG_UNMARSHAL_GETOBJ( t.Col );
	HG_UNMARSHAL_GETOBJ( t.Row );
	HG_UNMARSHAL_GETOBJ( t.f32Interval );
	HG_UNMARSHAL_GETOBJ( t.IsIdle );
	HG_UNMARSHAL_GETOBJ( t.m_unIdleFrameIndex );
	HG_UNMARSHAL_GETOBJ( t.m_vecFrames );
	HG_UNMARSHAL_OBJECT_END;
}

HG_MARSHAL_FULLSPEC( HGEngine::V1SDL::Timer ) {
	HG_MARSHAL_OBJECT_START;
	HG_MARSHAL_OBJECT_SETPROP( t.Active );
	HG_MARSHAL_OBJECT_SETPROP( t.f32Delay );
	HG_MARSHAL_OBJECT_SETPROP( t.f32DelayRest );
	HG_MARSHAL_OBJECT_SETPROP( t.f32Elapsed );
	HG_MARSHAL_OBJECT_SETPROP( t.f32ElpasedLoop );
	HG_MARSHAL_OBJECT_SETPROP( t.f32Interval );
	HG_MARSHAL_OBJECT_END;
}

HG_UNMARSHAL_FULLSPEC( HGEngine::V1SDL::Timer ) {
	HG_UNMARSHAL_OBJECT_START;
	HG_UNMARSHAL_GETOBJ( t.Active );
	HG_UNMARSHAL_GETOBJ( t.f32Delay );
	HG_UNMARSHAL_GETOBJ( t.f32DelayRest );
	HG_UNMARSHAL_GETOBJ( t.f32Elapsed );
	HG_UNMARSHAL_GETOBJ( t.f32ElpasedLoop );
	HG_UNMARSHAL_GETOBJ( t.f32Interval );
	HG_UNMARSHAL_OBJECT_END;
}

HG_MARSHAL_FULLSPEC( HGEngine::V1SDL::RigidBody ) {
	HG_MARSHAL_OBJECT_START;
	HG_MARSHAL_OBJECT_SETPROP( t.AngularDrag );
	HG_MARSHAL_OBJECT_SETPROP( t.GravityDrag );
	HG_MARSHAL_OBJECT_SETPROP( t.IsFrozen );
	HG_MARSHAL_OBJECT_SETPROP( t.LinearDrag );
	HG_MARSHAL_OBJECT_SETPROP( t.Mass );
	HG_MARSHAL_OBJECT_SETPROP( t.Velocity );
	HG_MARSHAL_OBJECT_END;
}

HG_UNMARSHAL_FULLSPEC( HGEngine::V1SDL::RigidBody ) {
	HG_UNMARSHAL_OBJECT_START;
	HG_UNMARSHAL_GETOBJ( t.AngularDrag );
	HG_UNMARSHAL_GETOBJ( t.GravityDrag );
	HG_UNMARSHAL_GETOBJ( t.IsFrozen );
	HG_UNMARSHAL_GETOBJ( t.LinearDrag );
	HG_UNMARSHAL_GETOBJ( t.Mass );
	HG_UNMARSHAL_GETOBJ( t.Velocity );
	HG_UNMARSHAL_OBJECT_END;
}

HG_MARSHAL_FULLSPEC( HGEngine::V1SDL::Collision ) {
	HG_MARSHAL_OBJECT_START;
	HG_MARSHAL_OBJECT_END;
}

HG_UNMARSHAL_FULLSPEC( HGEngine::V1SDL::Collision ) {
	HG_UNMARSHAL_OBJECT_START;
	HG_UNMARSHAL_OBJECT_END;
}

#define HG_MARSHAL_GAMEOBJECTSTART HG::HGComponent *c = nullptr
#define HG_MARSHAL_GAMEOBJECTSETPROP( COMP_TYPE, NODE_NAME ) \
c = t.GetComponent<COMP_TYPE>(); if ( c != nullptr ) { Marshal( *static_cast<COMP_TYPE*>(c), NODE_NAME, writer ); }

HG_MARSHAL_FULLSPEC( HGEngine::V1SDL::GameObject ) {
	HG_MARSHAL_OBJECT_START;
	HG_MARSHAL_GAMEOBJECTSTART;
	HG_MARSHAL_GAMEOBJECTSETPROP( HGEngine::V1SDL::Transform, "Transform" );
	HG_MARSHAL_GAMEOBJECTSETPROP( HGEngine::V1SDL::Animator2D, "Animator2D" );
	HG_MARSHAL_GAMEOBJECTSETPROP( HGEngine::V1SDL::RigidBody, "RigidBody" );
	HG_MARSHAL_GAMEOBJECTSETPROP( HGEngine::V1SDL::Collision, "Collision" );
	Marshal<HGEngine::V1SDL::Timer>( t.GetComponents<HGEngine::V1SDL::Timer>(), "Timers", writer );
	HG_MARSHAL_OBJECT_END;
}

HG_MARSHAL_FULLSPEC( HGEngine::V1SDL::GameObjectText ) {
	HG_MARSHAL_OBJECT_START;
	HG_MARSHAL_OBJECT_SETPROP( t.tColor );
	HG_MARSHAL_OBJECT_SETPROP( t.Text );
	
	HG_MARSHAL_GAMEOBJECTSTART;
	HG_MARSHAL_GAMEOBJECTSETPROP( HGEngine::V1SDL::Transform, "Transform" );
	HG_MARSHAL_GAMEOBJECTSETPROP( HGEngine::V1SDL::Animator2D, "Animator2D" );
	HG_MARSHAL_GAMEOBJECTSETPROP( HGEngine::V1SDL::RigidBody, "RigidBody" );
	HG_MARSHAL_GAMEOBJECTSETPROP( HGEngine::V1SDL::Collision, "Collision" );
	Marshal<HGEngine::V1SDL::Timer>( t.GetComponents<HGEngine::V1SDL::Timer>(), "Timers", writer );
	HG_MARSHAL_OBJECT_END;
}

HG_UNMARSHAL_FULLSPEC( HGEngine::V1SDL::GameObjectText ) {
	HG_UNMARSHAL_OBJECT_START;
	HG_UNMARSHAL_GETOBJ( t.tColor );
	HG_UNMARSHAL_GETOBJ( t.Text );
	HG_UNMARSHAL_GETOBJ( t.m_vecComponents );
	HG_UNMARSHAL_OBJECT_END;
}

}

}